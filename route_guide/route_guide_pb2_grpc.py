# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import route_guide_pb2 as route__guide__pb2


class RouteGuideStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_feature = channel.unary_unary(
                '/route_guide.RouteGuide/get_feature',
                request_serializer=route__guide__pb2.Point.SerializeToString,
                response_deserializer=route__guide__pb2.Feature.FromString,
                )
        self.list_features = channel.unary_stream(
                '/route_guide.RouteGuide/list_features',
                request_serializer=route__guide__pb2.Rectangle.SerializeToString,
                response_deserializer=route__guide__pb2.Feature.FromString,
                )
        self.record_route = channel.stream_unary(
                '/route_guide.RouteGuide/record_route',
                request_serializer=route__guide__pb2.Point.SerializeToString,
                response_deserializer=route__guide__pb2.RouteSummary.FromString,
                )
        self.route_chat = channel.stream_stream(
                '/route_guide.RouteGuide/route_chat',
                request_serializer=route__guide__pb2.RouteNote.SerializeToString,
                response_deserializer=route__guide__pb2.RouteNote.FromString,
                )


class RouteGuideServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_feature(self, request, context):
        """简单RPC

        包含给定的坐标点的要素信息

        如果返回的要素信息名称为空，代表对于给定的点没有要素信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_features(self, request, context):
        """服务器到客户端的流式RPC

        获取给定Rectangle中可用的特征，以流式传输
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def record_route(self, request_iterator, context):
        """客户端到服务器的流式RPC

        接受正在遍历的路线上的坐标的流，返回一个遍历完成后的RouteSummary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def route_chat(self, request_iterator, context):
        """双向流式RPC

        接受遍历路径时发送的RouteNotes流时，再接收其他的RouteNotes（例如来自其他用户）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouteGuideServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_feature': grpc.unary_unary_rpc_method_handler(
                    servicer.get_feature,
                    request_deserializer=route__guide__pb2.Point.FromString,
                    response_serializer=route__guide__pb2.Feature.SerializeToString,
            ),
            'list_features': grpc.unary_stream_rpc_method_handler(
                    servicer.list_features,
                    request_deserializer=route__guide__pb2.Rectangle.FromString,
                    response_serializer=route__guide__pb2.Feature.SerializeToString,
            ),
            'record_route': grpc.stream_unary_rpc_method_handler(
                    servicer.record_route,
                    request_deserializer=route__guide__pb2.Point.FromString,
                    response_serializer=route__guide__pb2.RouteSummary.SerializeToString,
            ),
            'route_chat': grpc.stream_stream_rpc_method_handler(
                    servicer.route_chat,
                    request_deserializer=route__guide__pb2.RouteNote.FromString,
                    response_serializer=route__guide__pb2.RouteNote.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'route_guide.RouteGuide', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RouteGuide(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_feature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/route_guide.RouteGuide/get_feature',
            route__guide__pb2.Point.SerializeToString,
            route__guide__pb2.Feature.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_features(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/route_guide.RouteGuide/list_features',
            route__guide__pb2.Rectangle.SerializeToString,
            route__guide__pb2.Feature.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def record_route(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/route_guide.RouteGuide/record_route',
            route__guide__pb2.Point.SerializeToString,
            route__guide__pb2.RouteSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def route_chat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/route_guide.RouteGuide/route_chat',
            route__guide__pb2.RouteNote.SerializeToString,
            route__guide__pb2.RouteNote.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
